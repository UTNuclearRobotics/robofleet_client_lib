// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UUIDMSGS_FB_UUID_MSGS_H_
#define FLATBUFFERS_GENERATED_UUIDMSGS_FB_UUID_MSGS_H_

#include "./flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 21,
             "Non-compatible flatbuffers version included");

namespace fb {
namespace uuid_msgs {

struct UniqueID;
struct UniqueIDBuilder;
struct UniqueIDT;

struct UniqueIDT : public ::flatbuffers::NativeTable {
  typedef UniqueID TableType;
  std::unique_ptr<fb::MsgMetadataT> __metadata{};
  std::vector<uint8_t> uuid{};
  UniqueIDT() = default;
  UniqueIDT(const UniqueIDT &o);
  UniqueIDT(UniqueIDT&&) FLATBUFFERS_NOEXCEPT = default;
  UniqueIDT &operator=(UniqueIDT o) FLATBUFFERS_NOEXCEPT;
};

struct UniqueID FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UniqueIDT NativeTableType;
  typedef UniqueIDBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT___METADATA = 4,
    VT_UUID = 6
  };
  const fb::MsgMetadata *__metadata() const {
    return GetPointer<const fb::MsgMetadata *>(VT___METADATA);
  }
  const ::flatbuffers::Vector<uint8_t> *uuid() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_UUID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT___METADATA) &&
           verifier.VerifyTable(__metadata()) &&
           VerifyOffsetRequired(verifier, VT_UUID) &&
           verifier.VerifyVector(uuid()) &&
           verifier.EndTable();
  }
  UniqueIDT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(UniqueIDT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<UniqueID> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const UniqueIDT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct UniqueIDBuilder {
  typedef UniqueID Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add___metadata(::flatbuffers::Offset<fb::MsgMetadata> __metadata) {
    fbb_.AddOffset(UniqueID::VT___METADATA, __metadata);
  }
  void add_uuid(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> uuid) {
    fbb_.AddOffset(UniqueID::VT_UUID, uuid);
  }
  explicit UniqueIDBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UniqueID> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UniqueID>(end);
    fbb_.Required(o, UniqueID::VT_UUID);
    return o;
  }
};

inline ::flatbuffers::Offset<UniqueID> CreateUniqueID(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<fb::MsgMetadata> __metadata = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> uuid = 0) {
  UniqueIDBuilder builder_(_fbb);
  builder_.add_uuid(uuid);
  builder_.add___metadata(__metadata);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UniqueID> CreateUniqueIDDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<fb::MsgMetadata> __metadata = 0,
    const std::vector<uint8_t> *uuid = nullptr) {
  auto uuid__ = uuid ? _fbb.CreateVector<uint8_t>(*uuid) : 0;
  return fb::uuid_msgs::CreateUniqueID(
      _fbb,
      __metadata,
      uuid__);
}

::flatbuffers::Offset<UniqueID> CreateUniqueID(::flatbuffers::FlatBufferBuilder &_fbb, const UniqueIDT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline UniqueIDT::UniqueIDT(const UniqueIDT &o)
      : __metadata((o.__metadata) ? new fb::MsgMetadataT(*o.__metadata) : nullptr),
        uuid(o.uuid) {
}

inline UniqueIDT &UniqueIDT::operator=(UniqueIDT o) FLATBUFFERS_NOEXCEPT {
  std::swap(__metadata, o.__metadata);
  std::swap(uuid, o.uuid);
  return *this;
}

inline UniqueIDT *UniqueID::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<UniqueIDT>(new UniqueIDT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void UniqueID::UnPackTo(UniqueIDT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = __metadata(); if (_e) { if(_o->__metadata) { _e->UnPackTo(_o->__metadata.get(), _resolver); } else { _o->__metadata = std::unique_ptr<fb::MsgMetadataT>(_e->UnPack(_resolver)); } } else if (_o->__metadata) { _o->__metadata.reset(); } }
  { auto _e = uuid(); if (_e) { _o->uuid.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->uuid.begin()); } }
}

inline ::flatbuffers::Offset<UniqueID> UniqueID::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const UniqueIDT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUniqueID(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<UniqueID> CreateUniqueID(::flatbuffers::FlatBufferBuilder &_fbb, const UniqueIDT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const UniqueIDT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto ___metadata = _o->__metadata ? CreateMsgMetadata(_fbb, _o->__metadata.get(), _rehasher) : 0;
  auto _uuid = _fbb.CreateVector(_o->uuid);
  return fb::uuid_msgs::CreateUniqueID(
      _fbb,
      ___metadata,
      _uuid);
}

}  // namespace uuid_msgs
}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_UUIDMSGS_FB_UUID_MSGS_H_
